"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer: 
"       Amir Salihefendic
"       http://amix.dk - amix@amix.dk
"
" Version: 
"       5.0 - 29/05/12 15:43:36
"
" Blog_post: 
"       http://amix.dk/blog/post/19691#The-ultimate-Vim-configuration-on-Github
"
" Awesome_version:
"       Get this config, nice color schemes and lots of plugins!
"
"       Install the awesome version from:
"
"           https://github.com/amix/vimrc
"
" Syntax_highlighted:
"       http://amix.dk/vim/vimrc.html
"
" Raw_version: 
"       http://amix.dk/vim/vimrc.txt
"
" Sections:
"    -> General
"    -> VIM user interface
"    -> Colors and Fonts
"    -> Files and backups
"    -> Text, tab and indent related
"    -> Visual mode related
"    -> Moving around, tabs and buffers
"    -> Status line
"    -> Editing mappings
"    -> vimgrep searching and cope displaying
"    -> Spell checking
"    -> Misc
"    -> Helper functions
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NeoBundle
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Note: Skip initialization for vim-tiny or vim-small.
if !1 | finish | endif

if has('vim_starting')
    if &compatible
        set nocompatible               " Be iMproved
endif

" Required:
set runtimepath+=~/.vim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"     => NeoBundle NeoBundles
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" vimproc
NeoBundle 'Shougo/vimproc.vim', {
            \ 'build' : {
            \     'windows' : 'make -f make_mingw32.mak',
            \     'cygwin' : 'make -f make_cygwin.mak',
            \     'mac' : 'make -f make_mac.mak',
            \     'unix' : 'make -f make_unix.mak',
            \    },
            \ }

" Colorscheme NeoBundles
NeoBundle 'tomasr/molokai'
NeoBundle 'Korrow/badwolf'

" Functionality improvements
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-commentary'
NeoBundle 'tpope/vim-repeat'

" Git NeoBundles
NeoBundle 'tpope/vim-fugitive'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'arecarn/git-diff-cached-preview.vim'

" Syntax Highlighting plugins
NeoBundle 'vim-scripts/scons.vim'
NeoBundle 'kergoth/vim-bitbake'
NeoBundle 'octol/vim-cpp-enhanced-highlight'

" Completion NeoBundles
NeoBundle 'ervandew/supertab'

" Tool Integration
NeoBundle 'janko-m/vim-test'
NeoBundle 'benmills/vimux'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'tpope/vim-dispatch'

" Interface NeoBundles
NeoBundle 'bling/vim-airline'
NeoBundle 'edkolev/tmuxline.vim'
NeoBundle 'mbbill/undotree'
NeoBundle 'mhinz/vim-startify'
NeoBundle 'jez/vim-superman'

" Unit
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/unite-help'
NeoBundle 'majkinetor/unite-cmdmatch'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'Shougo/unite-outline'
NeoBundle 'Shougo/unite-session'
NeoBundle 'andreicristianpetcu/unite-vim-superman'

" Other plugins
NeoBundle 'ntpeters/vim-better-whitespace'

NeoBundle 'scrooloose/nerdcommenter'

NeoBundle 'Lokaltog/vim-easymotion'


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"     => Vundle Footer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
call neobundle#end()

" Required:
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"     => Pre-packaged plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"TODO: Find out if this is a good way of doing this
runtime! ftplugin/man.vim

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Sets how many lines of history VIM has to remember
set history=700

" Enable filetype plugins
filetype plugin on
filetype indent on

" Set to auto read when a file is changed from the outside
set autoread

" With a map leader it's possible to do extra key combinations
" like <leader>w saves the current file
let mapleader = " "

"Fast saving
nnoremap <leader>w :w!<cr>

" :W sudo saves the file 
" (useful for handling the permission-denied error)
command! W w !sudo tee % > /dev/null


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set 7 lines to the cursor - when moving vertically using j/k
set so=7

" Avoid garbled characters in Chinese language windows OS
let $LANG='en' 
set langmenu=en
source $VIMRUNTIME/delmenu.vim
source $VIMRUNTIME/menu.vim

set number

" Turn on the WiLd menu
set wildmenu

" Ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

"Always show current position
set ruler

" Height of the command bar
set cmdheight=2

" A buffer becomes hidden when it is abandoned
set hid

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Ignore case when searching
set ignorecase

" When searching try to be smart about cases 
set smartcase

" Highlight search results
set hlsearch

" Makes search act like search in modern browsers
set incsearch 

" Don't redraw while executing macros (good performance config)
set lazyredraw 

" For regular expressions turn magic on
set magic

" Show matching brackets when text indicator is over them
set showmatch 
" How many tenths of a second to blink when matching brackets
set mat=2

" No annoying sound on errors
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Add a bit extra margin to the left
set foldcolumn=1

" Show line cursor in snert mode for Konsole
" Could cause problems in other terminals
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Tmuxline settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"Note: This plugin is used to generate a Tmux status line,
"doesn't do anything for normal use
let g:tmuxline_preset = {
      \'a'    : ['#(whoami)@#H'],
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '%a',
      \'y'    : ['%d', '%m', '%Y'],
      \'z'    : '%R'}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable 

" Enable 256 color mode
set t_Co=256

color badwolf
let g:badwolf_tabline = 1
" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

" Draw whitespace (cuz I'm paranoid)
" note: These ones need utf-8
set list listchars=tab:→\ ,trail:·


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Starify settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:startify_custom_header = [
\ '  __     ___             _____  _   _',
\ '  \ \   / (_)_ __ ___   |___  || |_| |',
\ '   \ \ / /| |  _   _ \     / /||___  |',
\ '    \ V / | | | | | | |   / /     | |',
\ '     \_/  |_|_| |_| |_|  /_/  (_) |_|',
\ '',
\ '',
\ ]
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Filetype handling
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if has("autocmd")

    augroup filetype
        autocmd!
        " Use SCons highlighting when opening SCons files
        au! BufRead,BufNewFile SCons* set filetype=scons

    augroup END

endif
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowb
set noswapfile


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use spaces instead of tabs
set expandtab

" Be smart when using tabs ;)
set smarttab

" 1 tab == 4 spaces
set shiftwidth=4
set tabstop=4

" Linebreak on 500 characters
set lbr
set tw=500

set ai "Auto indent
set si "Smart indent
set wrap "Wrap lines

" Show line at 80 columns
set colorcolumn=80

""""""""""""""""""""""""""""""
" => Diff related
""""""""""""""""""""""""""""""
set diffopt=filler,context:10,vertical

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => yank and register related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Yank to system clipboard
set clipboard=unnamedplus,unnamed

""""""""""""""""""""""""""""""
" => Visual mode related
""""""""""""""""""""""""""""""
" Visual mode pressing * or # searches for the current selection
" Super useful! From an idea by Michael Naumann
vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Treat long lines as break lines (useful when moving around in them)
map j gj
map k gk

" Disable highlight when <leader><cr> is pressed
map <silent> <leader><cr> :noh<cr>

" Smart way to move between windows
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Close the current buffer
map <leader>bd :Bclose<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tm :tabmove 
map <leader>t<leader> :tabnext 

" Let 'tl' toggle between this and the last accessed tab
let g:lasttab = 1
nmap <Leader>tl :exe "tabn ".g:lasttab<CR>
au TabLeave * let g:lasttab = tabpagenr()


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/

" Switch CWD to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>:pwd<cr>

" Specify the behavior when switching between buffers 
try
  set switchbuf=useopen,usetab,newtab
  set stal=2
catch
endtry

" Return to last edit position when opening files (You want this!)
if has("autocmd")
    autocmd BufReadPost *
         \ if line("'\"") > 0 && line("'\"") <= line("$") |
         \   exe "normal! g`\"" |
         \ endif
endif

" Go to first line in git commit messages
if has("autocmd")
    autocmd FileType gitcommit call setpos('.', [0, 1, 1, 0])
endif

" Remember info about open buffers on close
set viminfo^=%


""""""""""""""""""""""""""""""
" => Status line
""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Format the status line
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l

" Allow airline status bar use of powerline fonts
let g:airline_powerline_fonts = 1

"""""""""""""""""""""""""""""""
" => Useful functions
"""""""""""""""""""""""""""""""
"Add include gates to C/C++ header files
function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename
  execute "normal! Go#endif /* " . gatename . " */"
  normal! kk
endfunction

if has("autocmd")
    autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()
endif

"""""""""""""""""""""""""""""""
" => Grep tweaks
"""""""""""""""""""""""""""""""
set grepprg=ack\ -H\ --nocolor\ --nogroup

if has("autocmd")

    augroup QuickFix
        autocmd!
        "opens quick fix window on the bottom of all screens
        autocmd FileType qf wincmd J

        " Automatically open, but do not go to (if there are errors) the quickfix /
        " location list window, or close it when is has become empty.
        "
        " Note: Must allow nesting of autocmds to enable any customizations for quickfix
        " buffers.
        " Note: Normally, :cwindow jumps to the quickfix window if the command opens it
        " (but not if it's already open). However, as part of the autocmd, this doesn't
        " seem to happen.
        autocmd QuickFixCmdPost [^l]* nested cwindow
        autocmd QuickFixCmdPost    l* nested lwindow
        "TODO: Get this mapping working properly
        autocmd FileType qf nnoremap <buffer> O <Enter><C-w>p
        autocmd FileType qf nnoremap <buffer> q :q<CR>
    augroup END

endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NERDTREE Settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let NERDTreeIgnore = ['\.pyc$']

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-test settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let test#strategy = "vimux"
let test#python#options = '--with-terseout'
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Editing mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remap VIM 0 to first non-blank character
map 0 ^

" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

""""""""""""""""""""
" =>Better Whitespace
""""""""""""""""""""
" Blacklist some filetypes
let g:better_whitespace_filetypes_blacklist = ['unite', 'vimfiler']
""""""""""""""""""""
" =>Unite Settings
""""""""""""""""""""
" Use ag in unite grep source.
let g:unite_source_grep_command = 'ag'
let g:unite_source_grep_default_opts =
            \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
            \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''

let g:unite_source_grep_recursive_opt = ''

" Enable yank tracking
let g:unite_source_history_yank_enable = 1

""""""""""""""""""""
" =>Vimfiler Settings
""""""""""""""""""""
" vimfiler replaces netrw
let g:vimfiler_as_default_explorer = 1

""""""""""""""""""""
" =>Unite Mappings
""""""""""""""""""""
nnoremap <leader>ut :<C-u>Unite -buffer-name=files     -start-insert file_rec/async:!<cr>
nnoremap <leader>uf :<C-u>Unite -buffer-name=files     -start-insert file<cr>
nnoremap <leader>ur :<C-u>Unite -buffer-name=mru       -start-insert file_mru<cr>
nnoremap <leader>uo :<C-u>Unite -buffer-name=outline   -start-insert outline<cr>
nnoremap <leader>uy :<C-u>Unite -buffer-name=yank      -start-insert history/yank<cr>
nnoremap <leader>ue :<C-u>Unite -buffer-name=buffer    -start-insert buffer<cr>
nnoremap <leader>ug :<C-u>Unite -buffer-name=grep      -start-insert grep<cr>
nnoremap <leader>uh :<C-u>Unite -buffer-name=help      -start-insert help<cr>
nnoremap <leader>us :<C-u>Unite -buffer-name=sessions  -start-insert session<cr>
nnoremap <leader>uS :<C-u>Unite -buffer-name=sessions  -start-insert session/new<cr>
nnoremap <leader>um :<C-u>Unite -buffer-name=man       -start-insert manpage<cr>
nnoremap <leader>ue :VimFiler -split -winwidth=35 -columns={} -toggle -no-quit<CR>
cmap <C-o> <Plug>(unite_cmdmatch_complete)
""""""""""""""""""""
" =>Plugin Mappings
""""""""""""""""""""
nnoremap <leader>uu :UndotreeToggle<CR>

"Remap shift-k to use man plugin
nnoremap K :Man <cword><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Spell checking
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s
map <leader>sp [s
map <leader>sa zg
map <leader>s? z=


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Misc
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Remove the Windows ^M - when the encodings gets messed up
noremap <Leader>m mmHmt:%s/<C-V><cr>//ge<cr>'tzt'm

" Quickly open a buffer for scribble
map <leader>q :e ~/buffer<cr>

" Quickly open a markdown buffer for scribble
map <leader>x :e ~/buffer.md<cr>

" Toggle paste mode on and off
map <leader>pp :setlocal paste!<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Helper functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! CmdLine(str)
    exe "menu Foo.Bar :" . a:str
    emenu Foo.Bar
    unmenu Foo
endfunction 

function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction


" Returns true if paste mode is enabled
function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    en
    return ''
endfunction

" Don't close window, when deleting a buffer
command! Bclose call <SID>BufcloseCloseIt()
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" vim: foldmethod=marker
